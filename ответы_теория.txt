1. Сериализация и десериализация: Это процесс преобразования объекта в последовательность байтов для его сохранения или передачи через сеть (сериализация), а затем восстановления объекта из этих байтов (десериализация). В Java это достигается с помощью интерфейсов Serializable и Externalizable.

2. Последовательность работы с потоком:
   - Открытие потока (например, считывание из файла или сетевого соединения).
   - Чтение/запись данных из/в поток.
   - Закрытие потока.

3. Виды потоков:
   - Байтовые потоки (Byte Streams): Работают с отдельными байтами, например, InputStream и OutputStream.
   - Символьные потоки (Character Streams): Работают с символами Unicode, обычно используются для текстовых данных, например, Reader и Writer.
   - Объектные потоки (Object Streams): Позволяют сериализовать и десериализовать объекты, например, ObjectInputStream и ObjectOutputStream.
   - Буферизованные потоки (Buffered Streams): Повышают производительность за счёт использования буфера, например, BufferedReader и BufferedWriter.

4. Отличия IO от NIO:
   - IO (Input/Output): Это классическая модель ввода/вывода в Java, которая использует блокирующие операции. Каждый поток обрабатывает одно соединение или запрос за раз, что может привести к простою, если поток блокируется во время операции ввода-вывода.
   - NIO (New Input/Output): Это новая модель ввода/вывода, добавленная в Java 1.4, которая поддерживает неблокирующие операции. Вместо блокирования потоков во время операций ввода-вывода, NIO позволяет использовать селекторы (selectors), чтобы один поток мог обрабатывать несколько соединений одновременно.